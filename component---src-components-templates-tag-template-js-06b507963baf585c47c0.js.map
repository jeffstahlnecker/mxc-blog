{"version":3,"sources":["webpack:///./src/components/Globals/DisplayImage.js","webpack:///./src/components/Globals/PostRow.js","webpack:///./src/components/Globals/Title.js","webpack:///./src/components/Templates/Tag-Template.js","webpack:///./src/components/Globals/Section.js"],"names":["styled","className","img","data","width","useStaticQuery","fluid","defaultImg","childImageSharp","props","Center","div","setColor","mainBlack","setRem","media","laptop","setBorder","color","primaryColor","imageWidth","Category","mainGrey","Date","PostRow","text","heading","image","slug","featured","category","date","Section","to","Title","title","align","setLetterSpacing","setFont","main","Grid","tablet","FeaturedRow","portraitTablet","query","TagTemplate","pageContext","lang","lanPath","lanTag","tags","pageUrl","nodes","map","post","key","id","metaDescription","featuredImage","file","lightGrey","section"],"mappings":"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","file":"component---src-components-templates-tag-template-js-06b507963baf585c47c0.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport Img from \"gatsby-image\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nconst getImage = graphql`\n  {\n    defaultImg: file(relativePath: { eq: \"defaultImg.jpg\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp_tracedSVG\n        }\n      }\n    }\n  }\n`\n\nconst DisplayImage = ({ className, img, width }) => {\n  const data = useStaticQuery(getImage)\n\n  return (\n    <Img\n      fluid={img || data.defaultImg.childImageSharp.fluid}\n      className={className}\n    />\n  )\n}\n\nexport default styled(DisplayImage)`\n  width: ${props => props.width};\n  min-height: 100%;\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"styled-components\"\nimport Section from \"./Section\"\nimport Title from \"./Title\"\nimport { setRem, setBorder, setColor, media } from \"../../styles\"\nimport DisplayImage from \"./DisplayImage\"\n\nconst PostRow = ({ text, heading, image, slug, featured, category, date }) => {\n  return (\n    <Section>\n      <Link to={`/${slug}`}>\n        <Center imageWidth={featured ? `50vw` : `25vw`}>\n          <DisplayImage className=\"img\" img={image} />\n\n          <div className=\"info\">\n            <Title\n              title={heading}\n              className={featured ? `featured` : \"normal\"}\n            />\n            <p>{text}</p>\n            <Category>{featured ? `${category}` : null}</Category>\n            <Date>{date}</Date>\n          </div>\n        </Center>\n      </Link>\n    </Section>\n  )\n}\n\nconst Center = styled.div`\n  h3 {\n    color: ${setColor.mainBlack};\n  }\n  .img,\n  .info {\n    padding: ${setRem(15)};\n    ${media.laptop`\n       padding: ${setRem(30)};`}\n  }\n  .img {\n    display: block;\n    ${setBorder({ width: setRem(0), color: setColor.primaryColor })}\n  }\n  .featured {\n    margin-bottom: ${setRem(30)};\n    ${media.laptop`margin-bottom: ${setRem(76)};`}\n  }\n  .normal {\n    margin-bottom: ${setRem(20)};\n    font-size: ${setRem(24)};\n  }\n  .info {\n    p {\n      line-height: 20px;\n      font-size: ${setRem(16)};\n      color: ${setColor.mainBlack};\n    }\n  }\n  width: 90vw;\n  margin: 0 auto;\n\n  ${media.laptop`\n  width: 100vw;\n  max-width: ${setRem(1170)};\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-column-gap: ${setRem(32)};\n  .img {\n    align-self: center;\n    width: ${props => props.imageWidth};\n  }\n  .info {\n\n  }\n  a {\n    text-decoration: none;\n  }\n  ]\n  `}\n`\nexport const Category = styled.div`\n  color: ${setColor.mainGrey};\n  font-size: ${setRem(16)};\n  font-weight: 700;\n  margin-top: ${setRem(44)};\n  ${media.laptop``}\n`\n\nexport const Date = styled.div`\n  font-size: ${setRem(14)};\n  color: ${setColor.mainGrey};\n`\n\nexport default PostRow\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { setRem, setFont, setLetterSpacing } from \"../../styles\"\n\nconst Title = ({ className, title, align }) => {\n  return <h3 className={className}>{title}</h3>\n}\n\nexport default styled(Title)`\n  font-size: ${setRem(32)};\n  text-transform: capitalize;\n  ${setLetterSpacing(3)};\n  ${setFont.main};\n  text-align: ${props => props.align || \"left\"};\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../Layout\"\nimport Line from \"../Globals/Line\"\nimport { setColor, setRem, setFont, media } from \"../../styles\"\nimport PostRow from \"../Globals/PostRow\"\nimport SEO from \"../Globals/SEO\"\n\nconst TagTemplate = ({ data, pageContext: { lang = \"en\", slug } }) => {\n  const lanPath = lang === \"en\" ? \"\" : `${lang}/`\n  const lanTag =\n    lang === \"en\"\n      ? \"tag\"\n      : lang === \"ko\"\n      ? \"koTag\"\n      : lang === \"hans\"\n      ? \"zhchTag\"\n      : \"zhtwTag\"\n\n  return (\n    <Layout>\n      <div>\n        <SEO\n          title={data.tags[lanTag]}\n          pageUrl={`https://blog.mxc.org/${lanPath}tags/${data.tags.slug}`}\n        />\n        <Grid>\n          <div />\n          <FeaturedRow>\n            <Title>\n              <h1>{data.tags[lanTag]}</h1>\n            </Title>\n            {data[lang].nodes.map(post => {\n              return (\n                <div key={post.id}>\n                  <PostRow\n                    heading={post.title}\n                    text={post.post.metaDescription}\n                    image={\n                      post.featuredImage !== null\n                        ? post.featuredImage.childImageSharp.fluid\n                        : data.file.childImageSharp.fluid\n                    }\n                    slug={`${lanPath}post.post.slug`}\n                    date={post.post.date}\n                  />\n                  <Line color={setColor.lightGrey} />\n                </div>\n              )\n            })}\n          </FeaturedRow>\n          <div />\n        </Grid>\n      </div>\n      )\n    </Layout>\n  )\n}\nconst Grid = styled.div`\n  ${media.tablet`  display: grid;\n  grid-template-columns: 10vw 80vw 10vw;\n  column-gap: ${setRem(5)};`};\n`\n\nconst FeaturedRow = styled.div`\n  padding: 0 2vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  h1 {\n    text-align: center;\n    margin: 20px 0;\n    ${setFont}\n    font-size: ${setRem(38)};\n    color: ${setColor.mainBlack};\n  }\n  .img {\n    height: 244px;\n  }\n  ${media.portraitTablet`\n  .img {\n    height: 344px;\n  }`}\n  ${media.tablet`\n   .img {\n    height: 488px;\n  `}\n  ${media.laptop`.img{height:100px;}`}\n`\n\nconst Title = styled.div`\n  border-top: 3px solid ${setColor.mainBlack};\n  margin-top: ${setRem(40)};\n  ${media.tablet`\n    border-top: 3px solid ${setColor.mainBlack}; \n    width: 5vw;\n    margin-top: ${setRem(80)};`};\n`\n\nexport const query = graphql`\n  query($slug: String!) {\n    en: allStrapiPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n    }\n    ko: allStrapiKoPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n    }\n    hans: allStrapiZhchPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n    }\n    hant: allStrapiZhtwPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n    }\n    file(relativePath: { eq: \"defaultImg.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp_tracedSVG\n        }\n      }\n    }\n    tags: strapiTags(slug: { eq: $slug }) {\n      koSlug\n      koTag\n      slug\n      tag\n      zhchSlug\n      zhchTag\n      zhtwSlug\n      zhtwTag\n      id\n    }\n  }\n`\n\nexport default TagTemplate\n","import styled from \"styled-components\"\nimport { setRem } from \"../../styles\"\n\nconst Section = styled.section`\n  padding: ${setRem(28)} 0;\n  background: ${props => props.color};\n  a {\n    text-decoration: none;\n  }\n`\n\nexport default Section\n"],"sourceRoot":""}