{"version":3,"sources":["webpack:///./src/components/Templates/Tag-Template.js"],"names":["Grid","styled","div","media","tablet","setRem","FeaturedRow","setFont","setColor","mainBlack","portraitTablet","laptop","Title","query","TagTemplate","data","pageContext","lang","tSlug","lanPath","slug","today","lanTag","useState","activePage","setactivePage","nodes","slice","datToDisplay","setdatToDisplay","title","tags","pageUrl","map","post","path","length","enPost","key","id","heading","text","metaDescription","image","featuredImage","childImageSharp","fluid","file","date","color","lightGrey","style","display","justifyContent","itemClass","linkClass","itemsCountPerPage","totalItemsCount","totalCount","pageRangeDisplayed","onChange","pageNumber","start","end"],"mappings":"+1BAYA,IAsFMA,EAAOC,IAAOC,IAAV,yEAAGD,CAAH,SACNE,IAAMC,OADA,IAGMC,YAAO,KAGjBC,EAAcL,IAAOC,IAAV,gFAAGD,CAAH,8LASXM,IACWF,YAAO,IACXG,IAASC,UAKlBN,IAAMO,eAhBO,KAoBbP,IAAMC,OApBO,KAwBbD,IAAMQ,OAxBO,MA2BXC,EAAQX,IAAOC,IAAV,0EAAGD,CAAH,iDACeO,IAASC,UACnBJ,YAAO,IACnBF,IAAMC,OAHC,IAIiBI,IAASC,UAEnBJ,YAAO,MAGZQ,EAAK,aA6LHC,UA7TK,SAAC,GAGd,IAFLC,EAEI,EAFJA,KAEI,IADJC,YACI,IADWC,YACX,MADkB,KAClB,EADwBC,EACxB,EADwBA,MAEtBC,GADF,EAD+BC,KAC/B,EADqCC,MAEhB,OAATJ,EAAgB,GAAQA,EAAxB,KACZK,EAAS,MACb,OAAQL,GACN,IAAK,OACHK,EAAS,UACT,MACF,IAAK,OACHA,EAAS,UACT,MACF,IAAK,KACHA,EAAS,QACT,MACF,QACEA,EAAS,MAdT,MAiBgCC,mBAAS,GAAtCC,EAjBH,KAiBeC,EAjBf,OAkBoCF,mBACtCR,EAAKE,GAAMS,MAAMC,MAAM,EAAG,KADrBC,EAlBH,KAkBiBC,EAlBjB,KA6BJ,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CACEC,MAAOf,EAAKgB,KAAKT,GACjBU,QAAO,wBAA0Bb,EAA1B,QAAyCJ,EAAKgB,KAAKX,OAE5D,kBAACpB,EAAD,KACE,8BACA,kBAACM,EAAD,KACE,kBAACM,EAAD,KACE,4BAAKG,EAAKgB,KAAKT,KAEhBM,EAAaK,KAAI,SAAAC,GAChB,IAAIC,EAAO,GAIX,OAHIP,EAAaQ,OAAS,IACxBD,EAAgB,OAATlB,EAAgBiB,EAAKA,KAAKd,KAAOc,EAAKG,OAAOH,KAAKd,MAGzD,yBAAKkB,IAAKJ,EAAKK,IACb,kBAAC,IAAD,CACEC,QAASN,EAAKJ,MACdW,KAAMP,EAAKA,KAAKQ,gBAChBC,MACyB,OAAvBT,EAAKU,cACDV,EAAKU,cAAcC,gBAAgBC,MACnC/B,EAAKgC,KAAKF,gBAAgBC,MAEhC1B,KAAI,GAAKF,EAAQiB,EACjBa,KAAMd,EAAKA,KAAKc,OAElB,kBAAC,IAAD,CAAMC,MAAOzC,IAAS0C,iBAK9B,gCAnCN,IAuCE,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC7C,kBAAC,IAAD,CACEC,UAAU,YACVC,UAAU,YACV/B,WAAYA,EACZgC,kBAAmB,GACnBC,gBAAiB1C,EAAKE,GAAMyC,WAC5BC,mBAAoB,EACpBC,SAvDiB,SAAAC,GACvB,IAAMC,EAA2B,IAAlBD,EAAa,GACtBE,EAAMD,EAAQ,GACpBjC,EAAgBd,EAAKE,GAAMS,MAAMC,MAAMmC,EAAOC,IAC9CtC,EAAcoC","file":"component---src-components-templates-tag-template-js-dc7085bb963cd8ad6c6c.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React, { useState } from \"react\"\nimport styled from \"styled-components\"\nimport Pagination from \"react-js-pagination\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../Layout\"\nimport Line from \"../Globals/Line\"\nimport { setColor, setRem, setFont, media } from \"../../styles\"\nimport PostRow from \"../Globals/PostRow\"\nimport SEO from \"../Globals/SEO\"\n\nconst TagTemplate = ({\n  data,\n  pageContext: { lang = \"en\", tSlug, slug, today },\n}) => {\n  const lanPath = lang === \"en\" ? \"\" : `${lang}/`\n  let lanTag = \"tag\"\n  switch (lang) {\n    case \"hans\":\n      lanTag = \"zhchTag\"\n      break\n    case \"hant\":\n      lanTag = \"zhtwTag\"\n      break\n    case \"ko\":\n      lanTag = \"koTag\"\n      break\n    default:\n      lanTag = \"tag\"\n      break\n  }\n  const [activePage, setactivePage] = useState(0)\n  const [datToDisplay, setdatToDisplay] = useState(\n    data[lang].nodes.slice(0, 10)\n  )\n\n  const handlePageChange = pageNumber => {\n    const start = (pageNumber - 1) * 10\n    const end = start + 10\n    setdatToDisplay(data[lang].nodes.slice(start, end))\n    setactivePage(pageNumber)\n  }\n\n  return (\n    <Layout>\n      <div>\n        <SEO\n          title={data.tags[lanTag]}\n          pageUrl={`https://blog.mxc.org/${lanPath}tags/${data.tags.slug}`}\n        />\n        <Grid>\n          <div />\n          <FeaturedRow>\n            <Title>\n              <h1>{data.tags[lanTag]}</h1>\n            </Title>\n            {datToDisplay.map(post => {\n              let path = \"\"\n              if (datToDisplay.length > 0) {\n                path = lang === \"en\" ? post.post.slug : post.enPost.post.slug\n              }\n              return (\n                <div key={post.id}>\n                  <PostRow\n                    heading={post.title}\n                    text={post.post.metaDescription}\n                    image={\n                      post.featuredImage !== null\n                        ? post.featuredImage.childImageSharp.fluid\n                        : data.file.childImageSharp.fluid\n                    }\n                    slug={`${tSlug}${path}`}\n                    date={post.post.date}\n                  />\n                  <Line color={setColor.lightGrey} />\n                </div>\n              )\n            })}\n          </FeaturedRow>\n          <div />\n        </Grid>\n      </div>\n      )\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Pagination\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n          activePage={activePage}\n          itemsCountPerPage={10}\n          totalItemsCount={data[lang].totalCount}\n          pageRangeDisplayed={5}\n          onChange={handlePageChange}\n        />\n      </div>\n    </Layout>\n  )\n}\nconst Grid = styled.div`\n  ${media.tablet`  display: grid;\n  grid-template-columns: 10vw 80vw 10vw;\n  column-gap: ${setRem(5)};`};\n`\n\nconst FeaturedRow = styled.div`\n  padding: 0 2vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  h1 {\n    text-align: center;\n    margin: 20px 0;\n    ${setFont}\n    font-size: ${setRem(38)};\n    color: ${setColor.mainBlack};\n  }\n  .img {\n    height: 244px;\n  }\n  ${media.portraitTablet`\n  .img {\n    height: 344px;\n  }`}\n  ${media.tablet`\n   .img {\n    height: 488px;\n  `}\n  ${media.laptop`.img{height:100px;}`}\n`\n\nconst Title = styled.div`\n  border-top: 3px solid ${setColor.mainBlack};\n  margin-top: ${setRem(40)};\n  ${media.tablet`\n    border-top: 3px solid ${setColor.mainBlack}; \n    width: 5vw;\n    margin-top: ${setRem(80)};`};\n`\n\nexport const query = graphql`\n  query($slug: String!, $today: Date!) {\n    en: allStrapiPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n        date: { lte: $today }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n      totalCount\n    }\n    ko: allStrapiKoPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        enPost: { post: { slug: { ne: null } } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n        date: { lte: $today }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        enPost {\n          post {\n            slug\n          }\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n      totalCount\n    }\n    hans: allStrapiZhchPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        enPost: { post: { slug: { ne: null } } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n        date: { lte: $today }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        enPost {\n          post {\n            slug\n          }\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n      totalCount\n    }\n    hant: allStrapiZhtwPosts(\n      filter: {\n        post: { publish: { eq: true } }\n        enPost: { post: { slug: { ne: null } } }\n        tags: { elemMatch: { slug: { eq: $slug } } }\n        date: { lte: $today }\n      }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        date\n        title\n        post {\n          date(formatString: \"MMMM DD, YYYY\")\n          metaDescription\n          slug\n        }\n        enPost {\n          post {\n            slug\n          }\n        }\n        featuredImage {\n          childImageSharp {\n            fluid {\n              src\n            }\n          }\n        }\n        id\n        category {\n          zhchCategory\n          zhchSlug\n          slug\n          category\n          koSlug\n          koCategory\n          zhtwCategory\n          zhtwSlug\n        }\n      }\n      totalCount\n    }\n    file(relativePath: { eq: \"defaultImg.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp_tracedSVG\n        }\n      }\n    }\n    tags: strapiTags(slug: { eq: $slug }) {\n      koSlug\n      koTag\n      slug\n      tag\n      zhchSlug\n      zhchTag\n      zhtwSlug\n      zhtwTag\n      id\n    }\n  }\n`\n\nexport default TagTemplate\n"],"sourceRoot":""}