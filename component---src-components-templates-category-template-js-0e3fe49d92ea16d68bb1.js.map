{"version":3,"sources":["webpack:///./src/components/Globals/DisplayImage.js","webpack:///./src/components/Globals/PostRow.js","webpack:///./src/components/Globals/LocalSettings.js","webpack:///./src/components/Templates/Category-Template.js","webpack:///./src/components/Globals/Title.js","webpack:///./src/components/Globals/Section.js"],"names":["styled","className","img","data","width","fluid","defaultImg","childImageSharp","props","Center","div","setColor","mainBlack","setRem","media","laptop","setBorder","color","primaryColor","imageWidth","Category","mainGrey","Date","PostRow","text","heading","image","slug","featured","category","date","Section","to","Title","title","localeSettings","en","name","categoryPropName","slugPropName","relativePath","hant","hans","ko","Grid","tablet","FeaturedRow","setFont","portraitTablet","query","CategoryTemplate","pageContext","lang","locl","Layout","categories","nodes","map","item","key","id","SEO","pageUrl","edges","post","length","node","enPost","metaDescription","featuredImage","file","Line","lightGrey","align","setLetterSpacing","main","section"],"mappings":"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","file":"component---src-components-templates-category-template-js-0e3fe49d92ea16d68bb1.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport Img from \"gatsby-image\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nconst getImage = graphql`\n  {\n    defaultImg: file(relativePath: { eq: \"defaultImg.jpg\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp_tracedSVG\n        }\n      }\n    }\n  }\n`\n\nconst DisplayImage = ({ className, img, width }) => {\n  const data = useStaticQuery(getImage)\n\n  return (\n    <Img\n      fluid={img || data.defaultImg.childImageSharp.fluid}\n      className={className}\n    />\n  )\n}\n\nexport default styled(DisplayImage)`\n  width: ${props => props.width};\n  min-height: 100%;\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"styled-components\"\nimport Section from \"./Section\"\nimport Title from \"./Title\"\nimport { setRem, setBorder, setColor, media } from \"../../styles\"\nimport DisplayImage from \"./DisplayImage\"\n\nconst PostRow = ({ text, heading, image, slug, featured, category, date }) => {\n  return (\n    <Section>\n      <Link to={`/${slug}`}>\n        <Center imageWidth={featured ? `50vw` : `25vw`}>\n          <DisplayImage className=\"img\" img={image} />\n\n          <div className=\"info\">\n            <Title\n              title={heading}\n              className={featured ? `featured` : \"normal\"}\n            />\n            <p>{text}</p>\n            <Category>{featured ? `${category}` : null}</Category>\n            <Date>{date}</Date>\n          </div>\n        </Center>\n      </Link>\n    </Section>\n  )\n}\n\nconst Center = styled.div`\n  h3 {\n    color: ${setColor.mainBlack};\n  }\n  .img,\n  .info {\n    padding: ${setRem(15)};\n    ${media.laptop`\n       padding: ${setRem(30)};`}\n  }\n  .img {\n    display: block;\n    ${setBorder({ width: setRem(0), color: setColor.primaryColor })}\n  }\n  .featured {\n    margin-bottom: ${setRem(30)};\n    ${media.laptop`margin-bottom: ${setRem(76)};`}\n  }\n  .normal {\n    margin-bottom: ${setRem(20)};\n    font-size: ${setRem(24)};\n  }\n  .info {\n    p {\n      line-height: 20px;\n      font-size: ${setRem(16)};\n      color: ${setColor.mainBlack};\n    }\n  }\n  width: 90vw;\n  margin: 0 auto;\n\n  ${media.laptop`\n  width: 100vw;\n  max-width: ${setRem(1170)};\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-column-gap: ${setRem(32)};\n  .img {\n    align-self: center;\n    width: ${props => props.imageWidth};\n  }\n  .info {\n\n  }\n  a {\n    text-decoration: none;\n  }\n  ]\n  `}\n`\nexport const Category = styled.div`\n  color: ${setColor.mainGrey};\n  font-size: ${setRem(16)};\n  font-weight: 700;\n  margin-top: ${setRem(44)};\n  ${media.laptop``}\n`\n\nexport const Date = styled.div`\n  font-size: ${setRem(14)};\n  color: ${setColor.mainGrey};\n`\n\nexport default PostRow\n","export const localeSettings = {\n  en: {\n    name: \"en\",\n    categoryPropName: \"category\",\n    slugPropName: \"slug\",\n    relativePath: \"\",\n  },\n  hant: {\n    name: \"hant\",\n    categoryPropName: \"zhtwCategory\",\n    slugPropName: \"zhtwSlug\",\n    relativePath: \"zh-hant/\",\n  },\n  hans: {\n    name: \"hans\",\n    categoryPropName: \"zhchCategory\",\n    slugPropName: \"zhchSlug\",\n    relativePath: \"zh-hans/\",\n  },\n  ko: {\n    name: \"ko\",\n    categoryPropName: \"koCategory\",\n    slugPropName: \"koSlug\",\n    relativePath: \"ko/\",\n  },\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../Layout\"\nimport Line from \"../Globals/Line\"\nimport { setColor, setRem, setFont, media } from \"../../styles\"\nimport PostRow from \"../Globals/PostRow\"\nimport SEO from \"../Globals/SEO\"\nimport { localeSettings } from \"../Globals/LocalSettings\"\n\nconst CategoryTemplate = ({ data, pageContext: { lang = \"en\", category } }) => {\n  const locl = localeSettings[lang]\n\n  return (\n    <Layout>\n      {data.categories.nodes.map(item => {\n        return (\n          <div key={item.id}>\n            <SEO\n              title={item[locl.categoryPropName]}\n              pageUrl={`https://blog.mxc.org/${item[locl.slugPropName]}`}\n            />\n            <Grid>\n              <div />\n              <FeaturedRow>\n                <Title>\n                  <h1>{item[locl.categoryPropName]}</h1>\n                </Title>\n                {data[lang].edges.map(post => {\n                  let slug = \"\"\n                  if (data[lang].edges.length > 0) {\n                    slug =\n                      lang === \"en\"\n                        ? post.node.post.slug\n                        : post.node.enPost\n                        ? post.node.enPost.post.slug\n                        : \"\"\n                  }\n                  return (\n                    <div key={post.node.id}>\n                      <PostRow\n                        heading={post.node.title}\n                        text={\n                          post.node.post.metaDescription\n                            ? post.node.post.metaDescription\n                            : \"\"\n                        }\n                        image={\n                          post.node.featuredImage !== null\n                            ? post.node.featuredImage.childImageSharp.fluid\n                            : data.file.childImageSharp.fluid\n                        }\n                        slug={`${locl.relativePath}${slug}`}\n                        date={post.node.post.date}\n                      />\n                      <Line color={setColor.lightGrey} />\n                    </div>\n                  )\n                })}\n              </FeaturedRow>\n              <div />\n            </Grid>\n          </div>\n        )\n      })}\n    </Layout>\n  )\n}\nconst Grid = styled.div`\n  ${media.tablet`  display: grid;\n  grid-template-columns: 10vw 80vw 10vw;\n  column-gap: ${setRem(5)};`};\n`\n\nconst FeaturedRow = styled.div`\n  padding: 0 2vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  h1 {\n    text-align: center;\n    margin: 20px 0;\n    ${setFont}\n    font-size: ${setRem(38)};\n    color: ${setColor.mainBlack};\n  }\n  .img {\n    height: 244px;\n  }\n  ${media.portraitTablet`\n  .img {\n    height: 344px;\n  }`}\n  ${media.tablet`\n   .img {\n    height: 488px;\n  `}\n  ${media.laptop`.img{height:100px;}`}\n`\n\nconst Title = styled.div`\n  border-top: 3px solid ${setColor.mainBlack};\n  margin-top: ${setRem(40)};\n  ${media.laptop`\n    border-top: 3px solid ${setColor.mainBlack}; \n    width: 15vw;\n    margin-top: ${setRem(80)};`};\n`\n\nexport const query = graphql`\n  query($category: String!) {\n    en: allStrapiPosts(\n      sort: { order: DESC, fields: date }\n      filter: { category: { slug: { eq: $category } } }\n    ) {\n      edges {\n        node {\n          id\n          post {\n            metaDescription\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n          }\n          featuredImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid_withWebp_tracedSVG\n              }\n            }\n          }\n          category {\n            category\n          }\n          title\n        }\n      }\n    }\n    hans: allStrapiZhchPosts(\n      sort: { order: DESC, fields: date }\n      filter: {\n        category: { slug: { eq: $category } }\n        enPost: { post: { slug: { ne: null } } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          post {\n            metaDescription\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n          }\n          enPost {\n            post {\n              slug\n            }\n          }\n          featuredImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid_withWebp_tracedSVG\n              }\n            }\n          }\n          category {\n            category\n          }\n          title\n        }\n      }\n    }\n    hant: allStrapiZhtwPosts(\n      sort: { order: DESC, fields: date }\n      filter: {\n        category: { slug: { eq: $category } }\n        enPost: { post: { slug: { ne: null } } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          post {\n            metaDescription\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n          }\n          enPost {\n            post {\n              slug\n            }\n          }\n          featuredImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid_withWebp_tracedSVG\n              }\n            }\n          }\n          category {\n            category\n          }\n          title\n        }\n      }\n    }\n    ko: allStrapiKoPosts(\n      sort: { order: DESC, fields: date }\n      filter: {\n        category: { slug: { eq: $category } }\n        enPost: { post: { slug: { ne: null } } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          post {\n            metaDescription\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n          }\n          enPost {\n            post {\n              slug\n            }\n          }\n          featuredImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid_withWebp_tracedSVG\n              }\n            }\n          }\n          category {\n            category\n          }\n          title\n        }\n      }\n    }\n    categories: allStrapiCategories(filter: { slug: { eq: $category } }) {\n      nodes {\n        category\n        zhchCategory\n        zhchSlug\n        zhtwCategory\n        zhtwSlug\n        koSlug\n        koCategory\n        slug\n        id\n      }\n    }\n    file(relativePath: { eq: \"defaultImg.png\" }) {\n      childImageSharp {\n        fluid {\n          src\n        }\n      }\n    }\n  }\n`\n\nexport default CategoryTemplate\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { setRem, setFont, setLetterSpacing } from \"../../styles\"\n\nconst Title = ({ className, title, align }) => {\n  return <h3 className={className}>{title}</h3>\n}\n\nexport default styled(Title)`\n  font-size: ${setRem(32)};\n  text-transform: capitalize;\n  ${setLetterSpacing(3)};\n  ${setFont.main};\n  text-align: ${props => props.align || \"left\"};\n`\n","import styled from \"styled-components\"\nimport { setRem } from \"../../styles\"\n\nconst Section = styled.section`\n  padding: ${setRem(28)} 0;\n  background: ${props => props.color};\n  a {\n    text-decoration: none;\n  }\n`\n\nexport default Section\n"],"sourceRoot":""}